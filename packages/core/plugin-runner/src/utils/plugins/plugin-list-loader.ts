import * as fs from 'fs';
import * as path from 'path';
import {
  NpmPluginDefinition,
  PluginDefinition,
  PluginDefinitionSource,
} from '@phonophant/shared-models';
import * as cp from 'child_process';

export class PluginListLoader {
  constructor(private pluginListPath = './plugins.json') {}

  private createPackageJSON(npmPluginDefinitions: NpmPluginDefinition[]) {
    const packageJSON = {
      name: 'packageList',
      version: '1.0.0',
      description:
        'This file is autogenerated. Anything edited here will be overwritten!',
      private: true,
      dependencies: {},
    };

    npmPluginDefinitions.forEach(
      ({ packageName, version }) =>
        (packageJSON.dependencies[packageName] = version),
    );

    return packageJSON;
  }

  private requireModulesFromNpmPluginDefinition(npmPluginDefinitions: NpmPluginDefinition[], pathToNpmPackage: string) {
    return npmPluginDefinitions.map(pluginDefinition => {
      const packagePath = path.join(pathToNpmPackage, 'node_modules', pluginDefinition.packageName);
      const packageString = fs.readFileSync(path.join(packagePath, 'package.json')).toString();
      const packageJson = JSON.parse(packageString);
      try {
        const pathForRequire = path.join(packagePath, packageJson.main);
        const requiredDefaultModule = require(pathForRequire);
        pluginDefinition.instance = new requiredDefaultModule.default;      
      } catch(e) {
        console.log(`Could not instantiate module ${pluginDefinition.name}`);
      }
      return pluginDefinition;
    });
  }
  
  private loadNpmPluginDefinitions(pluginDefinitions: PluginDefinition[]): Promise<PluginDefinition[]> {
    return new Promise<PluginDefinition[]>((resolve, reject) => {
      const npmPlugins = pluginDefinitions.filter(({ source }) => source === PluginDefinitionSource.Npm) as NpmPluginDefinition[];
      const packageJSON = this.createPackageJSON(npmPlugins);
      const pathToNpmPackage = path.join(__dirname, '..', '..', 'plugins', 'npm');
      fs.writeFileSync(path.join(pathToNpmPackage, 'package.json'), JSON.stringify(packageJSON));
      cp.exec(
        `npm --prefix=${pathToNpmPackage} install`, 
        { cwd: pathToNpmPackage },
        (error) => {
          console.log(error);
          const entryFiles = this.requireModulesFromNpmPluginDefinition(npmPlugins, pathToNpmPackage);
          resolve(entryFiles);
        }
      );
    });
  }

  async loadPluginDefinitions(): Promise<PluginDefinition[]> {
    try {
      const pluginListString = fs.readFileSync(this.pluginListPath).toString();
      const pluginList = JSON.parse(pluginListString) as PluginDefinition[];
      const plugins = await this.loadNpmPluginDefinitions(pluginList);
      return plugins;
    } catch (e) {
      console.log(e);
      return [];
    }
  }
}
