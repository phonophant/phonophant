import * as fs from 'fs';
import * as path from 'path';
import {
  NpmPluginDefinition,
  NpmPlugin,
  PluginDefinition,
  PluginDefinitionSource,
  Plugin,
  LocalPlugin,
  PackageJson,
} from '@phonophant/shared-models';
import * as cp from 'child_process';

export class PluginListLoader {
  constructor(private pluginListPath = './plugins.json') {}

  private createPackageJSON(npmPluginDefinitions: NpmPluginDefinition[]) {
    const packageJSON = {
      name: 'packageList',
      version: '1.0.0',
      description:
        'This file is autogenerated. Anything edited here will be overwritten!',
      private: true,
      dependencies: {},
    };

    npmPluginDefinitions.forEach(
      ({ packageName, version }) =>
        (packageJSON.dependencies[packageName] = version),
    );

    return packageJSON;
  }

  private instantiatePlugin<T extends LocalPlugin | NpmPlugin>(plugin: T, packagePath: string, mainFile: string): T {
    if (!mainFile || !plugin.active) {
      return plugin;
    }

    try {
      const pathForRequire = path.join(packagePath, mainFile);
      const requiredDefaultModule = require(pathForRequire);
      plugin.instance = new requiredDefaultModule.default;      
    } catch(e) {
      console.log(`Could not instantiate module ${plugin.name}`);
    }
    return plugin;
  }

  private addMetaData(plugin: NpmPlugin, packagePath: string, packageJson: PackageJson): NpmPlugin {
    const pluginWithMetaData = Object.assign({}, plugin);
    if (packageJson.phonoplugin?.piletLocation) {
      pluginWithMetaData.piletLocation = path.join(packagePath, packageJson.phonoplugin?.piletLocation);      
    }
    if (packageJson.phonoplugin) {
      pluginWithMetaData.tags = packageJson.phonoplugin.tags || [];
      pluginWithMetaData.settingsEndpoint = packageJson.phonoplugin.settingsEndpoint;
    }
    pluginWithMetaData.version = packageJson.version || '0.0.x';
    pluginWithMetaData.description = packageJson.description || '';
    pluginWithMetaData.author = packageJson.author || '';
    
    return pluginWithMetaData;
  }

  private mapPluginDefinitionsToPlugins(npmPluginDefinitions: NpmPluginDefinition[], pathToNpmPackage: string): NpmPlugin[] {
    return npmPluginDefinitions.map(pluginDefinition => {
      let plugin = Object.assign({}, pluginDefinition) as NpmPlugin;
      const packagePath = path.join(pathToNpmPackage, 'node_modules', plugin.packageName);
      const packageString = fs.readFileSync(path.join(packagePath, 'package.json')).toString();
      const packageJson = JSON.parse(packageString);

      plugin = this.instantiatePlugin(plugin, packagePath, packageJson.main);
      plugin = this.addMetaData(plugin, packagePath, packageJson);
      
      return plugin;
    });
  }
  
  private loadNpmPlugins(pluginDefinitions: PluginDefinition[]): Promise<Plugin[]> {
    return new Promise<PluginDefinition[]>((resolve, reject) => {
      const npmPluginDefinitions = pluginDefinitions.filter(({ source }) => source === PluginDefinitionSource.Npm) as NpmPluginDefinition[];
      const packageJSON = this.createPackageJSON(npmPluginDefinitions);
      const pathToNpmPackage = path.join(__dirname, '..', '..', 'plugins', 'npm');
      fs.writeFileSync(path.join(pathToNpmPackage, 'package.json'), JSON.stringify(packageJSON));
      cp.exec(
        `npm --prefix=${pathToNpmPackage} install`, 
        { cwd: pathToNpmPackage },
        (error) => {
          console.log(error);
          const npmPlugins = this.mapPluginDefinitionsToPlugins(npmPluginDefinitions, pathToNpmPackage);
          resolve(npmPlugins);
        }
      );
    });
  }

  async loadPlugins(): Promise<Plugin[]> {
    try {
      const pluginListString = fs.readFileSync(this.pluginListPath).toString();
      const pluginList = JSON.parse(pluginListString) as PluginDefinition[];
      const plugins = await this.loadNpmPlugins(pluginList);
      return plugins;
    } catch (e) {
      console.log(e);
      return [];
    }
  }

  savePlugins(plugins: PluginDefinition[]) {
    fs.writeFileSync(this.pluginListPath, JSON.stringify(plugins));
  }
}
